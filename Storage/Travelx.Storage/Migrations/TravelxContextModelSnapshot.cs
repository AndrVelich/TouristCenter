// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Travelx.Storage.Context;

namespace Travelx.Storage.Migrations
{
    [DbContext(typeof(TravelxContext))]
    partial class TravelxContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.8-servicing-32085")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Travelx.Storage.Interfaces.Country.Models.Country", b =>
                {
                    b.Property<int>("CountryId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<string>("Description")
                        .IsRequired();

                    b.Property<decimal>("FiveStarsPrice");

                    b.Property<decimal>("FourStarsPrice");

                    b.Property<string>("MetaDescription");

                    b.Property<string>("MetaKeywords");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<string>("PageContent")
                        .IsRequired();

                    b.Property<string>("PageContentBottom");

                    b.Property<string>("PageHeader");

                    b.Property<decimal>("ThreeStarsPrice");

                    b.Property<string>("Title");

                    b.Property<string>("UrlName")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.HasKey("CountryId");

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("Travelx.Storage.Interfaces.Country.Models.CountryImage", b =>
                {
                    b.Property<int>("CountryId");

                    b.Property<int>("ImageId");

                    b.HasKey("CountryId", "ImageId");

                    b.HasIndex("ImageId");

                    b.ToTable("CountryImage");
                });

            modelBuilder.Entity("Travelx.Storage.Interfaces.Image.Models.Image", b =>
                {
                    b.Property<int>("ImageId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<byte[]>("ImageData");

                    b.Property<string>("MimeType");

                    b.HasKey("ImageId");

                    b.ToTable("Images");
                });

            modelBuilder.Entity("Travelx.Storage.Interfaces.Order.Models.Order", b =>
                {
                    b.Property<int>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedDateTime");

                    b.Property<string>("Description")
                        .HasMaxLength(500);

                    b.Property<bool>("IsNew");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<string>("TourOrButton");

                    b.Property<string>("Url");

                    b.HasKey("OrderId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("Travelx.Storage.Interfaces.Promotion.Models.Promotion", b =>
                {
                    b.Property<int>("PromotionId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .IsRequired();

                    b.Property<string>("MetaDescription");

                    b.Property<string>("MetaKeywords");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<string>("Title");

                    b.Property<DateTime>("UntilDate");

                    b.Property<string>("UrlName")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.HasKey("PromotionId");

                    b.ToTable("Promotions");
                });

            modelBuilder.Entity("Travelx.Storage.Interfaces.Promotion.Models.PromotionImage", b =>
                {
                    b.Property<int>("PromotionId");

                    b.Property<int>("ImageId");

                    b.HasKey("PromotionId", "ImageId");

                    b.HasIndex("ImageId");

                    b.ToTable("PromotionImage");
                });

            modelBuilder.Entity("Travelx.Storage.Interfaces.Tour.Models.Tour", b =>
                {
                    b.Property<int>("TourId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<int>("CountryId");

                    b.Property<string>("Description");

                    b.Property<bool>("IsFlightIncluded");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<int>("Nights");

                    b.Property<decimal>("Price");

                    b.Property<int>("Stars");

                    b.Property<string>("UrlName")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.HasKey("TourId");

                    b.HasIndex("CountryId");

                    b.ToTable("Tours");
                });

            modelBuilder.Entity("Travelx.Storage.Interfaces.Tour.Models.TourImage", b =>
                {
                    b.Property<int>("TourId");

                    b.Property<int>("ImageId");

                    b.HasKey("TourId", "ImageId");

                    b.HasIndex("ImageId");

                    b.ToTable("TourImage");
                });

            modelBuilder.Entity("Travelx.Storage.Interfaces.Country.Models.CountryImage", b =>
                {
                    b.HasOne("Travelx.Storage.Interfaces.Country.Models.Country", "Country")
                        .WithMany("CountryImages")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Travelx.Storage.Interfaces.Image.Models.Image", "Image")
                        .WithMany("CountryImages")
                        .HasForeignKey("ImageId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Travelx.Storage.Interfaces.Promotion.Models.PromotionImage", b =>
                {
                    b.HasOne("Travelx.Storage.Interfaces.Image.Models.Image", "Image")
                        .WithMany("PromotionImages")
                        .HasForeignKey("ImageId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Travelx.Storage.Interfaces.Promotion.Models.Promotion", "Promotion")
                        .WithMany("PromotionImages")
                        .HasForeignKey("PromotionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Travelx.Storage.Interfaces.Tour.Models.Tour", b =>
                {
                    b.HasOne("Travelx.Storage.Interfaces.Country.Models.Country", "Country")
                        .WithMany("Tours")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Travelx.Storage.Interfaces.Tour.Models.TourImage", b =>
                {
                    b.HasOne("Travelx.Storage.Interfaces.Image.Models.Image", "Image")
                        .WithMany("TourImages")
                        .HasForeignKey("ImageId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Travelx.Storage.Interfaces.Tour.Models.Tour", "Tour")
                        .WithMany("TourImages")
                        .HasForeignKey("TourId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
